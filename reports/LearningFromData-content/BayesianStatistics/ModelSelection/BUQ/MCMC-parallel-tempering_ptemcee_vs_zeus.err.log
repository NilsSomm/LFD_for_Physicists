Traceback (most recent call last):
  File "/usr/share/miniconda3/envs/2025-book-env/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/share/miniconda3/envs/2025-book-env/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/usr/share/miniconda3/envs/2025-book-env/lib/python3.11/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/share/miniconda3/envs/2025-book-env/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/share/miniconda3/envs/2025-book-env/lib/python3.11/asyncio/base_events.py", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/usr/share/miniconda3/envs/2025-book-env/lib/python3.11/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/usr/share/miniconda3/envs/2025-book-env/lib/python3.11/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/share/miniconda3/envs/2025-book-env/lib/python3.11/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------

sampler = ptemcee.Sampler(nwalkers, ndim, log_likelihood, log_prior, ntemps,
                         threads=nthreads, betas=betas)

#Making the sampling multi-threaded is as simple as adding the threads=Nthreads 
# argument to Sampler. 

#First, we run the sampler for 1000 burn-in iterations:

# initial walkers are normally distributed with mean mup and standard deviation sigp.
p0 = np.random.normal(loc=mup, scale=sigp, size=(ntemps, nwalkers, ndim))

print("Running burn-in phase")
for p, lnprob, lnlike in sampler.sample(p0, iterations=nburnin):
    pass
sampler.reset()

print("Running MCMC chains")
#Now we sample for nwalkers*niterations, recording every nthin-th sample:

for p, lnprob, lnlike in sampler.sample(p,iterations=niterations, thin=nthin):
    pass 
------------------


[31m---------------------------------------------------------------------------[39m
[31mAttributeError[39m                            Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[17][39m[32m, line 1[39m
[32m----> [39m[32m1[39m sampler = [43mptemcee[49m[43m.[49m[43mSampler[49m[43m([49m[43mnwalkers[49m[43m,[49m[43m [49m[43mndim[49m[43m,[49m[43m [49m[43mlog_likelihood[49m[43m,[49m[43m [49m[43mlog_prior[49m[43m,[49m[43m [49m[43mntemps[49m[43m,[49m
[32m      2[39m [43m                         [49m[43mthreads[49m[43m=[49m[43mnthreads[49m[43m,[49m[43m [49m[43mbetas[49m[43m=[49m[43mbetas[49m[43m)[49m
[32m      4[39m [38;5;66;03m#Making the sampling multi-threaded is as simple as adding the threads=Nthreads [39;00m
[32m      5[39m [38;5;66;03m# argument to Sampler. [39;00m
[32m      6[39m 
[32m      7[39m [38;5;66;03m#First, we run the sampler for 1000 burn-in iterations:[39;00m
[32m      8[39m 
[32m      9[39m [38;5;66;03m# initial walkers are normally distributed with mean mup and standard deviation sigp.[39;00m
[32m     10[39m p0 = np.random.normal(loc=mup, scale=sigp, size=(ntemps, nwalkers, ndim))

[36mFile [39m[32m/usr/share/miniconda3/envs/2025-book-env/lib/python3.11/site-packages/ptemcee/sampler.py:237[39m, in [36mSampler.__init__[39m[34m(self, nwalkers, dim, logl, logp, ntemps, Tmax, betas, threads, pool, a, loglargs, logpargs, loglkwargs, logpkwargs, adaptation_lag, adaptation_time, random)[39m
[32m    234[39m [38;5;28;01mif[39;00m threads > [32m1[39m [38;5;129;01mand[39;00m pool [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[32m    235[39m     [38;5;28mself[39m.pool = multi.Pool(threads)
[32m--> [39m[32m237[39m [38;5;28;43mself[39;49m[43m.[49m[43mreset[49m[43m([49m[43m)[49m

[36mFile [39m[32m/usr/share/miniconda3/envs/2025-book-env/lib/python3.11/site-packages/ptemcee/sampler.py:261[39m, in [36mSampler.reset[39m[34m(self, random, betas, time)[39m
[32m    258[39m [38;5;28;01mif[39;00m betas [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[32m    259[39m     [38;5;28mself[39m._betas = betas
[32m--> [39m[32m261[39m [38;5;28mself[39m.nswap = np.zeros([38;5;28mself[39m.ntemps, dtype=[43mnp[49m[43m.[49m[43mfloat[49m)
[32m    262[39m [38;5;28mself[39m.nswap_accepted = np.zeros([38;5;28mself[39m.ntemps, dtype=np.float)
[32m    264[39m [38;5;28mself[39m.nprop = np.zeros(([38;5;28mself[39m.ntemps, [38;5;28mself[39m.nwalkers), dtype=np.float)

[36mFile [39m[32m/usr/share/miniconda3/envs/2025-book-env/lib/python3.11/site-packages/numpy/__init__.py:324[39m, in [36m__getattr__[39m[34m(attr)[39m
[32m    319[39m     warnings.warn(
[32m    320[39m         [33mf[39m[33m"[39m[33mIn the future `np.[39m[38;5;132;01m{[39;00mattr[38;5;132;01m}[39;00m[33m` will be defined as the [39m[33m"[39m
[32m    321[39m         [33m"[39m[33mcorresponding NumPy scalar.[39m[33m"[39m, [38;5;167;01mFutureWarning[39;00m, stacklevel=[32m2[39m)
[32m    323[39m [38;5;28;01mif[39;00m attr [38;5;129;01min[39;00m __former_attrs__:
[32m--> [39m[32m324[39m     [38;5;28;01mraise[39;00m [38;5;167;01mAttributeError[39;00m(__former_attrs__[attr])
[32m    326[39m [38;5;28;01mif[39;00m attr == [33m'[39m[33mtesting[39m[33m'[39m:
[32m    327[39m     [38;5;28;01mimport[39;00m[38;5;250m [39m[34;01mnumpy[39;00m[34;01m.[39;00m[34;01mtesting[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[34;01mtesting[39;00m

[31mAttributeError[39m: module 'numpy' has no attribute 'float'.
`np.float` was a deprecated alias for the builtin `float`. To avoid this error in existing code, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
The aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:
    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations

